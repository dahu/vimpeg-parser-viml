; VimL (Vim Script) Parser
; Barry Arthur, 29 Oct 2011

.skip_white = true
.namespace = 'viml_parser'
.parser_name = 'viml#parser'
.root_element = 'viml'

viml            ::=  expr1
expr1           ::=  expr2 ('?' expr1 ':' expr1)?
expr2           ::=  expr3 ('||' expr2)?
expr3           ::=  expr4 ('&&' expr3)?
expr4           ::=  expr5 (isoreqop expr4)?
expr5           ::=  expr6 (addop expr5)?
expr6           ::=  expr7 (mulop expr6)?
expr7           ::=  unop* expr8

eqop            ::=  '==?' | '!=?' | '>=?' | '>?' | '<=?' | '<?' | '=\~?' | '!\~?' | '==#' | '!=#' | '>=#' | '>#' | '<=#' | '<#' | '=\~#' | '!\~#' | '==' | '!=' | '>=' | '>' | '<=' | '<' | '=\~' | '!\~'
isop            ::=  'isnot' | 'is'
isoreqop        ::=  isop | eqop
addop           ::=  '+' | '-' | '\.'
mulop           ::=  '\*' | '/' | '%'
unop            ::=  '!' | '-' | '+'

expr8           ::=  expr9 (listref | dictref | funcrefcall)*
expr9           ::=  number | string | list | dict | optval | envvar | regval | nestedexpr | funccall | ident

; need to add commit stamps to our PEG syntax to prevent rollback past known points
listref         ::=  '\[' exprange '\]'
dictref         ::=  '\w\@<=\.' ident
funcrefcall     ::=  '(' exprlist ')'

exprange        ::=  expr1 (':' expr1)?

numorstr        ::= number | string

number          ::=  '[-+]\?\d*\.\?\d\+\%([eE][-+]\?\d\+\)\?'

sqstr           ::=  "'" ("''" | !"'" '.')* "'"
dqstr           ::=  '"' ( '\\\\' | '\\"' | !'"' '.')* '"'
string          ::=  sqstr | dqstr

list            ::=  '\[\s*\]' | '\[' exprlist '\]'
; viml allows a single empty trailing "," in an exprlist
exprlist        ::=  expr1? (',\(\s*\]\)\@!' expr1)* ','?

dict            ::=  '{' (dictpair (',' dictpair)*)? '}'
dictpair        ::=  expr1 ':' expr1

optval          ::=  '&\w\+'

nestedexpr      ::=  '(' expr1 ')'

bareident       ::=  '\h\w*'
bracedident     ::=  ident? '{' ident '}\w*'
ident           ::=  bareident | bracedident

envvar          ::=  '\$\w\+'

regval          ::=  '@[a-z0-9_/.+*"'']'

namespace       ::=  '\h\w\+#'
funcident       ::=  '\%([bstw]:\)\?\w\+' | namespace '\w\+'
bracedfuncident ::=  funcident? '{' ident '}\w*'
barefunccall    ::=  funcident ('(\s*)' | ('(' exprlist ')'))
bracedfunccall  ::=  bracedfuncident '(' exprlist ')'
funccall        ::=  barefunccall | bracedfunccall

